// Generated by CoffeeScript 1.10.0
(function() {
  var M,
    slice = [].slice;

  M = {
    _keydown_callbacks: {},
    _keyup_callbacks: {},
    _pressed_keys: {},
    _generated_id: 0,
    _ids: {},
    _generateId: function() {
      this._generated_id += 1;
      return this._generated_id;
    },
    update: function(dt) {},
    onKeyPressed: function(keycode, event) {
      var args, callback, callbacks, info;
      if (this._pressed_keys[keycode]) {
        return;
      }
      this._pressed_keys[keycode] = true;
      callbacks = this._keydown_callbacks[keycode];
      if (!callbacks) {
        return;
      }
      for (keycode in callbacks) {
        info = callbacks[keycode];
        callback = info.callback;
        args = info.args;
        if (callback) {
          callback.apply(null, args);
        }
      }
    },
    onKeyReleased: function(keycode, event) {
      var args, callback, callbacks, info;
      if (!this._pressed_keys[keycode]) {
        return;
      }
      this._pressed_keys[keycode] = null;
      callbacks = this._keyup_callbacks[keycode];
      if (!callbacks) {
        return;
      }
      for (keycode in callbacks) {
        info = callbacks[keycode];
        callback = info.callback;
        args = info.args;
        if (callback) {
          callback.apply(null, args);
        }
      }
    },
    registerKeyDownCallback: function() {
      var args, callback, id, keycode, ref;
      keycode = arguments[0], callback = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      this._keydown_callbacks[keycode] = (ref = this._keydown_callbacks[keycode]) != null ? ref : {};
      id = this._generateId();
      this._keydown_callbacks[keycode][id] = {
        callback: callback,
        args: args
      };
      this._ids[id] = this._keydown_callbacks[keycode];
      return id;
    },
    registerKeyUpCallback: function() {
      var args, callback, id, keycode, ref;
      keycode = arguments[0], callback = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      this._keyup_callbacks[keycode] = (ref = this._keyup_callbacks[keycode]) != null ? ref : {};
      id = this._generateId();
      this._keyup_callbacks[keycode][id] = {
        callback: callback,
        args: args
      };
      this._ids[id] = this._keyup_callbacks[keycode];
      return id;
    },
    unregisterCallback: function(id) {
      var t;
      t = self._ids[id];
      if (!t) {
        cc.assert(false);
        return;
      }
      t[id] = null;
      return this._ids[id] = null;
    }
  };

  utils.InputManager = M;

}).call(this);

//# sourceMappingURL=input_manager.js.map
